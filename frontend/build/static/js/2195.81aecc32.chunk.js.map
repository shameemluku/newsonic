{"version":3,"file":"static/js/2195.81aecc32.chunk.js","mappings":"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","sources":["Pages/Category/Infinite.js","Pages/Category/CategoryPage.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Col, Container, Row } from \"react-bootstrap\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport LatestCard from \"../../Pages/Homepage/Latest/LatestCard/LatestCard\";\r\nimport loadingAnim from \"../../Images/loading.gif\"\r\nimport { useSelector } from \"react-redux\";\r\nimport { fetchPosts } from \"../../api\";\r\nimport FooterComp from \"../../components/Footer/Footer\";\r\n\r\nexport default function Infinite({posts, category}) {\r\n  const [items, setItem] = useState([]);\r\n  const [hasMore, setHasmore] = useState(true);\r\n  // const style = {\r\n  //   height: 300,\r\n  //   border: \"1px solid green\",\r\n  //   margin: 6,\r\n  //   padding: 8,\r\n  // };\r\n\r\n  const style = {\r\n    marginBottom: 30,\r\n    padding: 8,\r\n  };\r\n\r\n  useEffect(()=>{\r\n    if(posts!==null){\r\n      setHasmore(true)\r\n      setItem([...posts.filter((val,i)=>{\r\n        if(i>3){ \r\n          return val}\r\n      })])\r\n    }\r\n  },[posts])\r\n\r\n\r\n  useEffect(()=>{\r\n\r\n    if(items.length<5){\r\n      setHasmore(false)\r\n    }\r\n\r\n    if (items.length > 50) {\r\n      setHasmore(false);\r\n    } \r\n\r\n  },[items])\r\n\r\n\r\n  \r\n\r\n  const fetchMoreData = async () => {\r\n\r\n    let {data} = await fetchPosts(items.length+3,items.length,category)\r\n\r\n\r\n    if(data.status){\r\n      setItem([...items,...data.posts])\r\n    }else{\r\n      setHasmore(false)\r\n    }\r\n  };\r\n\r\n\r\n  const loading = <>\r\n    <div className=\"infiite-loading-anime\">\r\n    <img src={loadingAnim} alt=\"\"></img>\r\n      \r\n    </div>\r\n  </>\r\n\r\n  return (\r\n    <InfiniteScroll\r\n      dataLength={items.length}\r\n      next={fetchMoreData}\r\n      hasMore={hasMore}\r\n      loader={loading}\r\n      endMessage={<></>}\r\n    >\r\n      <Row className=\"p-0 m-0\">\r\n        {items.map((post, index) =>{\r\n\r\n          if(index===13){\r\n            \r\n            return <>\r\n            <Col sm={12} md={8} className=\"p-0\">\r\n            <div style={{height:\"300px\"}} className=\"p-2\" key={index}>\r\n                <div className=\"bg-dark h-100\">dgdg</div>\r\n            </div>\r\n          </Col>\r\n            </>\r\n            \r\n          } \r\n\r\n          return <>\r\n          <Col sm={12} md={4} className=\"p-0\">\r\n            <div style={style} key={index}>\r\n              <LatestCard post={post} width=\"100%\" height=\"230px\" category={\"Business\"}/>\r\n            </div>\r\n         \r\n          </Col>\r\n          </>\r\n        } )}\r\n      </Row>\r\n    </InfiniteScroll>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useLocation, useNavigate, useParams } from \"react-router-dom\";\r\nimport { getPosts } from \"../../actions/postActions\";\r\nimport { fetchPosts } from \"../../api\";\r\nimport Header from \"../../components/Header/Header\";\r\nimport LatestCard from \"../Homepage/Latest/LatestCard/LatestCard\";\r\nimport BlackCard from \"../Homepage/Technology/BlackCard\";\r\nimport Technology from \"../Homepage/Technology/Technology\";\r\nimport Infinite from \"./Infinite\";\r\nimport noResult from \"../../Images/noresult.gif\"\r\nimport \"./CategoryPage.css\";\r\nimport FooterComp from \"../../components/Footer/Footer\";\r\n\r\nfunction CategoryPage() {\r\n  \r\n  const [catPosts, setCatPosts] = useState([]);\r\n  const [category, setCategory] = useState(useParams().category);\r\n  const [notFound, setNotFound] = useState(false);\r\n  const { posts } = useSelector((state) => state);\r\n  \r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  const location = useLocation()\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      try {\r\n        \r\n        setNotFound(false)\r\n        setCategory(location.pathname.slice(10))\r\n        dispatch({type:\"SHOW_PROGRESS\"})\r\n        let catposts = await (await fetchPosts(9, 0, category)).data?.posts;\r\n        dispatch({type:\"HIDE_PROGRESS\"})\r\n        if (catposts?.length === 0) {\r\n          setNotFound(true);\r\n        } else {\r\n          setCatPosts([...catposts]);\r\n        }\r\n      } catch (error) {\r\n        setNotFound(true);\r\n      }\r\n    })();\r\n    document.title = `${category} - Newsonic`\r\n    posts.length === 0 && dispatch(getPosts());\r\n  }, [category,navigate]);\r\n\r\n  const formatedCategory = ()=>{\r\n    return (category[0].toUpperCase() + category.toLowerCase().slice(1))\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n\r\n      <div className=\"category-content\">\r\n        {!notFound ? (\r\n          <>\r\n            <Container>\r\n              <div className=\"cat-heading\">#{formatedCategory()}</div>\r\n              <Row>\r\n                {!(catPosts.length < 1) && (\r\n                  <BlackCard data={catPosts[0]} lg={3} />\r\n                )}\r\n                {!(catPosts.length < 2) && (\r\n                  <BlackCard data={catPosts[1]} lg={3} />\r\n                )}\r\n                {!(catPosts.length < 3) && (\r\n                  <BlackCard data={catPosts[2]} lg={3} />\r\n                )}\r\n                {!(catPosts.length < 4) && (\r\n                  <BlackCard data={catPosts[3]} lg={3} />\r\n                )}\r\n\r\n                {catPosts.length === 0 && <BlackCard data={null} lg={3} />}\r\n                {catPosts.length === 0 && <BlackCard data={null} lg={3} />}\r\n                {catPosts.length === 0 && <BlackCard data={null} lg={3} />}\r\n                {catPosts.length === 0 && <BlackCard data={null} lg={3} />}\r\n\r\n                {catPosts.length!==0 && catPosts.length < 5 && (\r\n                  <Container className=\"mt-3\">\r\n\r\n                    <span className=\"cat-continue-head\">Continue Reading...</span>\r\n                    <div className=\"d-flex card-scroll mt-3\">\r\n                      {posts.slice(0, 7).map((val) => {\r\n                        return (\r\n                          <span className=\"me-2\">\r\n                            <LatestCard\r\n                              post={val}\r\n                              width=\"300px\"\r\n                              loadFull={true}\r\n                            />\r\n                          </span>\r\n                        );\r\n                      })}\r\n                    </div>\r\n                  </Container>\r\n                )}\r\n              </Row>\r\n            </Container>\r\n            <Container className=\"p-0\">\r\n              <Infinite posts={catPosts} category={formatedCategory()} />\r\n            </Container>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <Container>\r\n              <div className=\"content-center cat-error\">\r\n                <div>\r\n                <p className=\"text-center cat-error-head\">#{formatedCategory()}</p>\r\n                <img className=\"cat-error-gif\" src={noResult} alt=\"\" draggable={false}/>\r\n                <p className=\"text-center cat-error-desc\">Nothing to show in this category</p>\r\n                </div>\r\n              </div>\r\n              <span className=\"cat-continue-head\">Continue Reading...</span>\r\n              <div className=\"d-flex card-scroll mt-3 mb-3\">\r\n                {posts.slice(0, 7).map((val) => {\r\n                  return (\r\n                    <span className=\"me-2\">\r\n                      <LatestCard post={val} width=\"300px\" loadFull={true} />\r\n                    </span>\r\n                  );\r\n                })}\r\n              </div>\r\n            </Container>\r\n          </>\r\n        )}\r\n      </div>\r\n      <FooterComp/>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CategoryPage;\r\n"],"names":["Infinite","posts","category","useState","items","setItem","hasMore","setHasmore","style","marginBottom","padding","useEffect","filter","val","i","length","fetchMoreData","fetchPosts","data","status","loading","className","src","loadingAnim","alt","dataLength","next","loader","endMessage","Row","map","post","index","Col","sm","md","height","LatestCard","width","catPosts","setCatPosts","useParams","setCategory","notFound","setNotFound","useSelector","state","dispatch","useDispatch","navigate","useNavigate","location","useLocation","pathname","slice","type","catposts","document","title","getPosts","formatedCategory","toUpperCase","toLowerCase","Header","Container","noResult","draggable","loadFull","BlackCard","lg","Footer"],"sourceRoot":""}